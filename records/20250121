2025/01/21
	Posit_sinh.cpp:
		sinh(x) = (e^x - e^(-x)) / 2
		
		當x趨近於0, sinh(x) ~= x
		當|x|很大時，sinh(x) ~= e^|x| * 0.5 * sign(x)
		
		shuge: 用於處理overflow的返回值
		
		if x == NAR || x == inf:
			return NAR || inf
		
		h: 縮放的變數, x為正則h為正，x為負則h為負
		
	test9.cpp:
		test Posit_sinh.cpp
		compile: g++ -std=c++17 -o test9 test9.cpp Posit_sinh.cpp Posit_fabs.cpp Posit_exp.cpp
	
	test10.cpp:
		test Posit_asinh.cpp
		compile: g++ -std=c++17 -o test10 test10.cpp Posit_asinh.cpp Posit_fabs.cpp Posit_log.cpp Posit_sqrt.cpp
	
	Posit_sinPi.cpp:
		改寫Posit_sin.cpp, 可以計算sin(pi * x)
		
	test11.cpp:
		test Posit_sinPi.cpp
		compile: make test11
	
	Makefile:
		方便編譯
		
	Posit_remhalf.cpp:
		類似Posit_rempio2.cpp，只是傳入的是pi的倍數
	
	test12.cpp:
		compare Posit_rempio2.cpp, Posit_remhalf.cpp
		compile: make test12
	
	myfdlibm.h:
		increase:
			extern Posit64 Posit_sinPi(Posit64 x);
			extern __int32_t Posit_remhalf(Posit64 x, Posit64 *y);
			
	test5.cpp:
		compile: make test5
		
	Posit_cosPi.cpp:
		Posit_rempio2() turn to Posit_remhalf()
		
