2025/01/16
	
	Posit_acos.cpp:
		pio2: pi / 2
		ix: x high word
		
		arccos(x) ~= p(x) / q(x)
		
		if |x| >= 1.0:
			if |x| == 1.0:
				if x > zero:
					// acos(1) = 0
					return 0.0;
				else
					// acos(-1) = pi
					// 2 * pio2_lo: 補償值
					return pi + 2 * pio2_lo
			else
				// cos() 最大為1，因此如果大於1或小於-1，視為NAR
				return (x - x) / (x - x)	
		if |x| < 0.5:
			if ix <= 2 ^ -57:
				// 值太小，視為0
				// cos(pi / 2) = 0
				return pio2_hi + pio2_lo	
			else
				z = x ^ 2	// x 平方的base
				
				// arccos(x) = pi / 2 - (x - x * p(x) / q(x))	
				
				return pio2_hi - (x - (pio2_lo-x*r));
		else if x < -0.5:
			計算公式: arccos(x) = pi - 2 * arcsin(sqrt(1 + x / 2))
		else x > 0.5:
			計算公式: 2 * arcsin(sqrt(1 - x / 2))
			
	test6.cpp:
		測試Posit_acos
		command: g++ -std=c++17 -o test6 test6.cpp Posit_acos.cpp Posit_sqrt.cpp Posit_fabs.cpp
		
				
